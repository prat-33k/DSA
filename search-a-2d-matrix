https://leetcode.com/problems/search-a-2d-matrix/


//apply binary search, first to find potential row and then to find the element in the potential row








class Solution {
public:
           bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int r = rowSelect(matrix,target);
        if(r==-1)
            return false;
        else{
            return checkRow(matrix,r,target);
        }
    }
    int rowSelect(vector<vector<int>>& matrix, int target){
        int lo=0;
        int hi = matrix.size()-1;
        while(lo<=hi){
            int mid = (lo+hi)/2;
            if(matrix[mid][0]<=target && matrix[mid][matrix[0].size()-1]>=target){
                return mid;
            }
            else if(matrix[mid][0]>target)
                hi=mid-1;
            else if(matrix[mid][0]<target)
                lo=mid+1;
        }
        return -1;
    }
    bool checkRow(vector<vector<int>>& matrix,int r, int target){
        int lo = 0;
        int hi= matrix[0].size()-1;
        while(lo<=hi){
            int mid = (lo+hi)/2;
            if(matrix[r][mid]==target)
                return true;
            else if(matrix[r][mid]>target)
                hi=mid-1;
            else
                lo=lo+1;
                
        }
        return false;
    }
};
